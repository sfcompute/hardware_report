name: Nix Build and Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

# Prevent concurrent builds
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Check if release exists
        id: check_release
        run: |
          if gh release view ${{ github.ref_name }} &>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "upload_url=$(gh release view ${{ github.ref_name }} --json uploadUrl -q .uploadUrl)" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        if: steps.check_release.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
      
      - name: Set upload URL
        id: set_upload_url
        run: |
          if [ "${{ steps.check_release.outputs.exists }}" == "true" ]; then
            echo "upload_url=${{ steps.check_release.outputs.upload_url }}" >> $GITHUB_OUTPUT
          else
            echo "upload_url=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_OUTPUT
          fi

  build-linux:
    needs: create-release
    timeout-minutes: 60  # Increase timeout for Rust builds
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
      
      - name: Build binary package
        run: |
          echo "Starting build at $(date)"
          nix build .#default --print-build-logs
          echo "Build completed at $(date)"
          cp -L result/bin/hardware_report hardware_report-linux-x86_64
      
      - name: Create tarball
        run: |
          tar czf hardware_report-linux-x86_64-${{ needs.create-release.outputs.version }}.tar.gz hardware_report-linux-x86_64
          sha256sum hardware_report-linux-x86_64-${{ needs.create-release.outputs.version }}.tar.gz > hardware_report-linux-x86_64-${{ needs.create-release.outputs.version }}.tar.gz.sha256
      
      - name: Upload Release Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: hardware_report-linux-x86_64-${{ needs.create-release.outputs.version }}.tar.gz
          asset_name: hardware_report-linux-x86_64-${{ needs.create-release.outputs.version }}.tar.gz
          asset_content_type: application/gzip
      
      - name: Upload SHA256
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: hardware_report-linux-x86_64-${{ needs.create-release.outputs.version }}.tar.gz.sha256
          asset_name: hardware_report-linux-x86_64-${{ needs.create-release.outputs.version }}.tar.gz.sha256
          asset_content_type: text/plain

  build-macos:
    needs: [create-release, build-linux]  # Run after Linux to avoid concurrent builds
    timeout-minutes: 60
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
      
      - name: Build binary package
        run: |
          echo "Starting build at $(date)"
          nix build .#default --print-build-logs
          echo "Build completed at $(date)"
          cp -L result/bin/hardware_report hardware_report-darwin-x86_64
      
      - name: Create tarball
        run: |
          tar czf hardware_report-darwin-x86_64-${{ needs.create-release.outputs.version }}.tar.gz hardware_report-darwin-x86_64
          shasum -a 256 hardware_report-darwin-x86_64-${{ needs.create-release.outputs.version }}.tar.gz > hardware_report-darwin-x86_64-${{ needs.create-release.outputs.version }}.tar.gz.sha256
      
      - name: Upload Release Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: hardware_report-darwin-x86_64-${{ needs.create-release.outputs.version }}.tar.gz
          asset_name: hardware_report-darwin-x86_64-${{ needs.create-release.outputs.version }}.tar.gz
          asset_content_type: application/gzip
      
      - name: Upload SHA256
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: hardware_report-darwin-x86_64-${{ needs.create-release.outputs.version }}.tar.gz.sha256
          asset_name: hardware_report-darwin-x86_64-${{ needs.create-release.outputs.version }}.tar.gz.sha256
          asset_content_type: text/plain

  build-debian-package:
    needs: [create-release, build-linux]  # Run after Linux build
    timeout-minutes: 45
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
      
      - name: Build Debian package
        run: |
          nix build .#deb --print-build-logs
          cp -L result/*.deb hardware-report_${{ needs.create-release.outputs.version }}_amd64.deb
      
      - name: Generate checksums
        run: |
          sha256sum hardware-report_${{ needs.create-release.outputs.version }}_amd64.deb > hardware-report_${{ needs.create-release.outputs.version }}_amd64.deb.sha256
      
      - name: Upload Debian package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: hardware-report_${{ needs.create-release.outputs.version }}_amd64.deb
          asset_name: hardware-report_${{ needs.create-release.outputs.version }}_amd64.deb
          asset_content_type: application/vnd.debian.binary-package
      
      - name: Upload Debian package checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: hardware-report_${{ needs.create-release.outputs.version }}_amd64.deb.sha256
          asset_name: hardware-report_${{ needs.create-release.outputs.version }}_amd64.deb.sha256
          asset_content_type: text/plain

  build-docker:
    needs: [create-release, build-debian-package]  # Run after Debian build
    timeout-minutes: 45
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
      
      - name: Build Docker image with Nix
        run: |
          nix build .#dockerImage --print-build-logs
          docker load < result
      
      - name: Tag and Push to GitHub Container Registry
        run: |
          # Get the image name and tag from the loaded image
          IMAGE_ID=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "hardware-report:latest" | head -n1)
          
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Tag for version and latest
          docker tag $IMAGE_ID ghcr.io/${{ github.repository_owner }}/hardware-report:${{ needs.create-release.outputs.version }}
          docker tag $IMAGE_ID ghcr.io/${{ github.repository_owner }}/hardware-report:latest
          
          # Push both tags
          docker push ghcr.io/${{ github.repository_owner }}/hardware-report:${{ needs.create-release.outputs.version }}
          docker push ghcr.io/${{ github.repository_owner }}/hardware-report:latest